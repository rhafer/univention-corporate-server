#!/usr/share/ucs-test/runner python
## desc: Test cn=admin-settings LDAP ACL's
## tags: [udm,apptest]
## roles: [domaincontroller_master]
## exposure: careful
## packages:
##   - univention-config
##   - univention-directory-manager-tools

from __future__ import print_function
import ldap
import ldap.modlist
import univention.uldap
import univention.testing.utils as utils
import univention.testing.udm as udm_test


def add(dn, attrs, lo, expect_fail=False):
	al = ldap.modlist.addModlist(attrs)
	try:
		print('Attempt adding %r with %r; al=%r' % (dn, attrs, al))
		lo.add_s(dn, al)
	except (ldap.INSUFFICIENT_ACCESS, ldap.OBJECT_CLASS_VIOLATION, ldap.CONSTRAINT_VIOLATION):
		if not expect_fail:
			raise
		print('Prevented creation')
	else:
		if expect_fail:
			raise ValueError('Add operation with %s for %r succeeded.' % (attrs, dn))
		print('Created')


def modify(dn, old, attrs, lo, expect_fail=False):
	ml = ldap.modlist.modifyModlist(old, attrs)
	try:
		print('Attempt modifying %r with %r old=%r; ml=%r' % (dn, attrs, old, ml))
		lo.modify_s(dn, ml)
	except (ldap.INSUFFICIENT_ACCESS, ldap.OBJECT_CLASS_VIOLATION, ldap.CONSTRAINT_VIOLATION):
		if not expect_fail:
			raise
		print('Prevented modification')
	else:
		if expect_fail:
			raise ValueError('Modify operation with %s for %r succeeded.' % (attrs, dn))
		print('Modified')


def main():
	with udm_test.UCSTestUDM() as udm:
		password = 'univention'
		binddn, uid = udm.create_user(password=password)
		utils.verify_ldap_object(binddn)

		lo = univention.uldap.access(binddn=binddn, bindpw=password)
		# lo.bind(binddn, password)  # TODO: This looks like unnecessary?
		lo = lo.lo
		print('I am', lo.whoami_s())
		dn = 'uid=%s,cn=admin-settings,%s' % (ldap.dn.escape_dn_chars(uid), udm.UNIVENTION_CONTAINER)

		valid = [{
			'objectClass': (b'univentionAdminUserSettings',),
			'uid': [uid],
		}, {
			'objectClass': (b'univentionAdminUserSettings',),
			'uid': [uid],
			'univentionAdminShowSelf': [b'1'],
			'univentionAdminSelfAttributes': [b'foo'],
			'univentionPolicyObject': [binddn.encode('UTF-8')],
			'univentionDnsObject': [dn.encode('UTF-8')],
		}]
		invalid = [{
			'objectClass': ('uidObject', 'person'),
			'uid': [uid],
			'sn': [b'foo'],
			'cn': [b'bar'],
		}, {
			'objectClass': ('uidObject', 'univentionAdminUserSettings'),
			'uid': [uid],
		}, {
			'objectClass': ('CourierMailAccount', 'univentionAdminUserSettings'),
			'uid': [uid],
			'uidNumber': [b'0'],
			'gidNumber': [b'0']
		}, {
			'objectClass': ('CourierMailAccount', 'univentionAdminUserSettings'),
			'uid': [uid],
			'uidNumber': [b'1'],
			'gidNumber': [b'1']
		}]
		print('Trying invalid combinations')
		for attr in invalid:
			add(dn, attr, lo, True)

		print('Trying valid combinations')
		for i, entry in enumerate(valid):
			add(dn, entry, lo)
			utils.verify_ldap_object(dn, entry)
			print('Test transition to invalid entries')
			for invalid_attrs in invalid:
				modify(dn, entry, invalid_attrs, lo, True)
			try:
				valid[i + 1]
			except IndexError:
				pass
			else:
				print('Test transition to valid entry')
				modify(dn, entry, valid[i + 1], lo)

			lo.delete_s(dn)


if __name__ == '__main__':
	main()
